# ¿Qué son, para qué sirven y cómo se utilizan FormControl, FormGroup y FormBuilder?

## FormControl

**FormControl** es una clase en Angular que se utiliza para rastrear el valor y el estado de validación de un campo de formulario individual. Puede manejar cualquier tipo de control de formulario, como entradas de texto, casillas de verificación y selectores. Para usarlo, primero debes importarlo desde `@angular/forms`. Luego, puedes crear una instancia de FormControl y asignarla a un campo de formulario en tu componente.

## FormGroup

**FormGroup** es una clase que agrupa múltiples instancias de FormControl, permitiendo manejar y validar múltiples campos de formulario como una sola unidad. Un FormGroup puede contener otros FormGroup anidados y FormArray. Para usarlo, también necesitas importarlo desde `@angular/forms`. Puedes crear un FormGroup para agrupar varios FormControl.

## FormBuilder

**FormBuilder** es un servicio en Angular que proporciona métodos convenientes para crear instancias de FormControl y FormGroup. Facilita la creación de formularios reactivos con una sintaxis más limpia y concisa. Para usar FormBuilder, necesitas inyectar el servicio FormBuilder en tu componente y usarlo para crear instancias de FormGroup y FormControl de una manera más concisa.

#  Busca en la página oficial de Angular (o utiliza un recurso de O’Reilly) en el que se especifiquen todos los validadores que incluye Angular para ser utilizados en los formularios reactivos. Construye una tabla de resumen de estos.


| Validador | Descripción |
| --- | --- |
| `Validators.required` | Valida que el campo de formulario no esté vacío. |
| `Validators.requiredTrue` | Valida que el valor del campo de formulario sea `true`. |
| `Validators.email` | Valida que el valor del campo de formulario sea un correo electrónico válido. |
| `Validators.minLength(length: number)` | Valida que la longitud del valor del campo de formulario sea al menos `length`. |
| `Validators.maxLength(length: number)` | Valida que la longitud del valor del campo de formulario no sea mayor que `length`. |
| `Validators.pattern(pattern: string|RegExp)` | Valida que el valor del campo de formulario coincida con el patrón de expresión regular proporcionado. |
| `Validators.nullValidator` | Un validador que realiza ninguna operación. |
| `Validators.compose(validators: ValidatorFn[])` | Crea un validador que consta de una serie de validadores. |
| `Validators.composeAsync(validators: AsyncValidatorFn[])` | Crea un validador asíncrono que consta de una serie de validadores asíncronos. |

Estos validadores se pueden utilizar en formularios reactivos para garantizar que los datos introducidos por el usuario cumplen con ciertos criterios antes de ser procesados o almacenados.

# ¿Qué son, cuáles son y para qué sirven los estados en los formularios reactivos?

Los estados en los formularios reactivos de Angular son propiedades que nos permiten conocer el estado actual de un formulario o de un campo de formulario. Estos estados son útiles para controlar la lógica de la aplicación, como mostrar mensajes de error, habilitar o deshabilitar botones, entre otros.

Los principales estados de los formularios reactivos en Angular son:

- **valid**: Este estado indica si el campo de formulario o el formulario completo ha pasado todas las validaciones. Si todos los campos son válidos, `form.valid` será `true`, de lo contrario, será `false`.

- **invalid**: Este es el opuesto al estado `valid`. Si algún campo del formulario no ha pasado las validaciones, `form.invalid` será `true`.

- **pristine**: Este estado indica si el usuario ha interactuado con el campo de formulario. Si el usuario no ha interactuado con el campo de formulario, `control.pristine` será `true`.

- **dirty**: Este es el opuesto al estado `pristine`. Si el usuario ha interactuado con el campo de formulario, `control.dirty` será `true`.

- **touched**: Este estado indica si el campo de formulario ha sido visitado. Si el usuario ha visitado el campo de formulario, `control.touched` será `true`.

- **untouched**: Este es el opuesto al estado `touched`. Si el usuario no ha visitado el campo de formulario, `control.untouched` será `true`.

- **pending**: Este estado indica que la validación del campo de formulario está en proceso, por ejemplo, si estás realizando una validación asíncrona.

Estos estados se pueden utilizar en la plantilla HTML para controlar la visualización de elementos en la interfaz de usuario, como mensajes de error, utilizando directivas como `*ngIf`.