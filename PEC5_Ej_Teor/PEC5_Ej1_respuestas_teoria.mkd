# Ejercicio 1

a) **¿Cuáles son las principales diferencias entre formularios dirigidos por template y formularios reactivos?**

Las principales diferencias entre los formularios dirigidos por template (Template-Driven Forms) y los formularios reactivos (Reactive Forms) en Angular son:

1. **Enfoque de diseño**: Los formularios dirigidos por template son más simples y se utilizan para crear formularios básicos, mientras que los formularios reactivos son más robustos y se utilizan para crear formularios más complejos y dinámicos.

2. **Manejo de datos**: En los formularios dirigidos por template, los datos se manejan en el template, mientras que en los formularios reactivos, los datos se manejan en el componente de la clase.

3. **Validación**: En los formularios dirigidos por template, la validación se realiza en el template utilizando directivas, mientras que en los formularios reactivos, la validación se realiza en el componente de la clase utilizando funciones.

4. **Mutabilidad**: Los formularios dirigidos por template son mutables, lo que significa que los cambios en el formulario pueden afectar directamente al modelo de datos. Por otro lado, los formularios reactivos son inmutables, lo que significa que cada cambio en el formulario da lugar a un nuevo estado del modelo de datos.

5. **Escalabilidad**: Los formularios reactivos son más escalables que los formularios dirigidos por template debido a su naturaleza inmutable y a su manejo de datos en el componente de la clase.

6. **Pruebas unitarias**: Los formularios reactivos son más fáciles de probar en comparación con los formularios dirigidos por template debido a que los datos y la lógica de validación se manejan en el componente de la clase.

b) **¿Qué son, para qué sirven y cómo se utilizan las directivas ngModel y ngModelChange?**

`ngModel` y `ngModelChange` son directivas proporcionadas por Angular para facilitar el trabajo con formularios.

1. **ngModel**: Es una directiva que implementa el enlace de datos bidireccional (two-way data binding). Esto significa que vincula el valor de un elemento de entrada HTML (como un campo de texto) a una propiedad en el modelo de datos, y viceversa. Cuando el valor del elemento de entrada cambia, la propiedad del modelo de datos también cambia. Del mismo modo, si la propiedad del modelo de datos cambia, el valor del elemento de entrada también cambia.

   Para usar `ngModel`, necesitas importar el módulo `FormsModule` en tu módulo de aplicación. Aquí tienes un ejemplo de cómo se usa `ngModel`:

   ```html
   <input [(ngModel)]="nombre" />
   ```

   En este ejemplo, `nombre` es una propiedad en tu componente de clase. Cualquier cambio en el campo de entrada se reflejará en la propiedad `nombre`, y cualquier cambio en la propiedad `nombre` se reflejará en el campo de entrada.

2. **ngModelChange**: Es un evento que se dispara cada vez que el valor del modelo cambia debido a la interacción del usuario con el campo de entrada. Puedes usar `ngModelChange` para realizar acciones cada vez que el valor del modelo cambia.

   Aquí tienes un ejemplo de cómo se usa `ngModelChange`:

   ```html
   <input [(ngModel)]="nombre" (ngModelChange)="hacerAlgo($event)" />
   ```

   En este ejemplo, `hacerAlgo` es un método en tu componente de clase que se llamará cada vez que el valor del modelo cambie. `$event` es una variable que contiene el nuevo valor del modelo.

c) **¿Qué son, cuáles son y para qué sirven los estados en los formularios dirigidos por templates?**

Los estados en los formularios dirigidos por templates en Angular son propiedades que nos permiten conocer el estado actual de un formulario o de un campo de formulario. Estos estados pueden ser útiles para proporcionar retroalimentación visual al usuario, habilitar o deshabilitar botones, realizar validaciones, entre otras cosas.

Aquí están los principales estados que puedes encontrar en un formulario dirigido por templates:

1. **touched**: Este estado se vuelve verdadero (`true`) una vez que el campo ha sido visitado (es decir, ha recibido el foco). Se utiliza comúnmente para saber si un campo ha sido tocado por el usuario.

2. **untouched**: Este es el estado opuesto a `touched`. Es verdadero (`true`) si el campo no ha sido visitado.

3. **pristine**: Este estado es verdadero (`true`) si el valor del campo no ha cambiado desde que se inicializó. Se utiliza comúnmente para saber si un campo ha sido modificado.

4. **dirty**: Este es el estado opuesto a `pristine`. Es verdadero (`true`) si el valor del campo ha cambiado desde que se inicializó.

5. **valid**: Este estado es verdadero (`true`) si el campo ha pasado todas sus validaciones. Se utiliza comúnmente para saber si un campo es válido.

6. **invalid**: Este es el estado opuesto a `valid`. Es verdadero (`true`) si el campo no ha pasado al menos una de sus validaciones.

Puedes acceder a estos estados en tu template utilizando la directiva `ngModel`. Por ejemplo, si tienes un campo de entrada con `ngModel` asignado a `nombre`, puedes acceder al estado `touched` de ese campo con `nombre.touched`.

d) **¿Qué ventajas aportan los FormGroup en la composición de formularios?**

Los `FormGroup` en Angular son una parte clave de los formularios reactivos y proporcionan varias ventajas para la composición de formularios:

1. **Agrupación de campos de formulario**: `FormGroup` permite agrupar varios campos de formulario en un solo objeto, lo que facilita el manejo de los valores de los campos, las validaciones y los estados.

2. **Validación a nivel de grupo**: Con `FormGroup`, puedes aplicar validaciones a todo el grupo de campos de formulario, no solo a campos individuales. Esto es útil cuando tienes validaciones que dependen de más de un campo.

3. **Manejo de estado**: `FormGroup` mantiene el estado de sus controles hijos, lo que te permite comprobar si un grupo de campos es válido, ha sido modificado, ha sido visitado, etc.

4. **Estructura de formulario dinámica**: `FormGroup` te permite crear una estructura de formulario dinámica al permitirte agregar o quitar controles de formulario en tiempo de ejecución.

5. **Facilita las pruebas**: Como `FormGroup` maneja los datos y las validaciones en el componente de la clase, hace que las pruebas sean más fáciles y predecibles.

En resumen, `FormGroup` proporciona una forma poderosa y flexible de trabajar con formularios en Angular, especialmente cuando se trata de formularios complejos y dinámicos.
